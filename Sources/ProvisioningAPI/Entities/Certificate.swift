// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Shuttle

public struct Certificate: Codable, Identifiable {
	public var type: `Type`
	public var id: String
	public var attributes: Attributes?
	public var links: ResourceLinks

	public enum `Type`: String, Codable, CaseIterable {
		case certificates
	}

	public struct Attributes: Codable {
		public var name: String?
		public var certificateType: CertificateType?
		public var displayName: String?
		public var serialNumber: String?
		public var platform: BundleIDPlatform?
		public var expirationDate: Date?
		public var certificateContent: String?
        
        public enum Field: String, Codable, CaseIterable {
            case certificateContent
            case certificateType
            case csrContent
            case displayName
            case expirationDate
            case name
            case platform
            case serialNumber
        }

		public init(
            name: String? = nil,
            certificateType: CertificateType? = nil,
            displayName: String? = nil,
            serialNumber: String? = nil,
            platform: BundleIDPlatform? = nil,
            expirationDate: Date? = nil,
            certificateContent: String? = nil
        ) {
			self.name = name
			self.certificateType = certificateType
			self.displayName = displayName
			self.serialNumber = serialNumber
			self.platform = platform
			self.expirationDate = expirationDate
			self.certificateContent = certificateContent
		}
	}

	public init(
        type: `Type` = .certificates,
        id: String,
        attributes: Attributes? = nil,
        links: ResourceLinks
    ) {
		self.type = type
		self.id = id
		self.attributes = attributes
		self.links = links
	}
}

// MARK: - Equatable
extension Certificate: Equatable {
    
    public static func == (lhs: Certificate, rhs: Certificate) -> Bool {
        lhs.id == rhs.id
    }
}

// MARK: - Hashable
extension Certificate: Hashable {
    
    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
    }
}
