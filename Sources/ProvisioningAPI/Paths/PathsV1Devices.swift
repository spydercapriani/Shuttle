// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder
import Shuttle

extension AppStoreConnect.V1 {
	public var devices: Devices {
		Devices(path: path + "/devices")
	}

	public struct Devices {
		/// Path: `/v1/devices`
		public let path: String

        public func get(parameters: GetParameters? = .init()) -> Request<DevicesResponse> {
			Request(
                method: "GET",
                url: path,
                query: parameters?.asQuery,
                id: "devices-get_collection"
            )
		}

		public struct GetParameters {
            public let filterName: [Device.Name]?
			public let filterPlatform: [BundleIDPlatform]?
			public let filterStatus: [Device.Status]?
            public let filterUdid: [Device.Identifier]?
            public let filterID: [Device.ID]?
			public let sort: Sort?
			public let deviceFields: [Device.Attributes.Field]?
            @Clamped(to: maxResources)
            private(set) var limit: Int = .maxResources

			public enum Sort: String, Codable, CaseIterable {
				case id
				case minusid = "-id"
				case name
				case minusname = "-name"
				case platform
				case minusplatform = "-platform"
				case status
				case minusstatus = "-status"
				case udid
				case minusudid = "-udid"
			}

			public init(
                filterName: [Device.Name]? = nil,
                filterPlatform: [BundleIDPlatform]? = nil,
                filterStatus: [Device.Status]? = nil,
                filterUdid: [String]? = nil,
                filterID: [Device.ID]? = nil,
                sort: Sort? = nil,
                deviceFields: [Device.Attributes.Field]? = nil,
                limit: Int = .maxResources
            ) {
				self.filterName = filterName
				self.filterPlatform = filterPlatform
				self.filterStatus = filterStatus
				self.filterUdid = filterUdid
				self.filterID = filterID
				self.sort = sort
				self.deviceFields = deviceFields
				self.limit = limit
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterName, forKey: "filter[name]")
				encoder.encode(filterPlatform, forKey: "filter[platform]")
				encoder.encode(filterStatus, forKey: "filter[status]")
				encoder.encode(filterUdid, forKey: "filter[udid]")
				encoder.encode(filterID, forKey: "filter[id]")
				encoder.encode(sort, forKey: "sort")
				encoder.encode(deviceFields, forKey: "fields[devices]")
				encoder.encode(limit, forKey: "limit")
				return encoder.items
			}
		}

		public func post(_ body: DeviceCreateRequest) -> Request<DeviceResponse> {
			Request(
                method: "POST",
                url: path,
                body: body,
                id: "devices-create_instance"
            )
		}
	}
}
