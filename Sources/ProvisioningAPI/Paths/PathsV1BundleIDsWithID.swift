// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder
import Shuttle

extension AppStoreConnect.V1.BundleIDs {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/bundleIds/{id}`
		public let path: String

		public func get(
            parameters: GetParameters? = nil
        ) -> Request<BundleIDResponse> {
			Request(
                method: "GET",
                url: path,
                query: parameters?.asQuery,
                id: "bundleIds-get_instance"
            )
		}

		public struct GetParameters {
			public var bundleIDFields: [BundleID.Attributes.Field]?
			public var include: [Include]?
			public var bundleIDCapabilityFields: [BundleIDCapability.Attributes.Field]?
			public var profileFields: [Profile.Attributes.Field]?
			public var appFields: [AppField]?
            @ClampedOptional(to: maxResources)
			public var bundleIDCapabilitiesLimit: Int?
            @ClampedOptional(to: maxResources)
			public var profilesLimit: Int?
            
            public enum Include: String, Codable, CaseIterable {
                case app
                case bundleIDCapabilities = "bundleIdCapabilities"
                case profiles
            }

			public init(
                bundleIDFields: [BundleID.Attributes.Field]? = nil,
                include: [Include]? = nil,
                bundleIDCapabilityFields: [BundleIDCapability.Attributes.Field]? = nil,
                profileFields: [Profile.Attributes.Field]? = nil,
                appFields: [AppField]? = nil,
                bundleIDCapabilitiesLimit: Int? = nil,
                profilesLimit: Int? = nil
            ) {
				self.bundleIDFields = bundleIDFields
				self.include = include
				self.bundleIDCapabilityFields = bundleIDCapabilityFields
				self.profileFields = profileFields
				self.appFields = appFields
				self.bundleIDCapabilitiesLimit = bundleIDCapabilitiesLimit
				self.profilesLimit = profilesLimit
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(bundleIDFields, forKey: "fields[bundleIds]")
				encoder.encode(include, forKey: "include")
				encoder.encode(bundleIDCapabilityFields, forKey: "fields[bundleIdCapabilities]")
				encoder.encode(profileFields, forKey: "fields[profiles]")
				encoder.encode(appFields, forKey: "fields[apps]")
				encoder.encode(bundleIDCapabilitiesLimit, forKey: "limit[bundleIdCapabilities]")
				encoder.encode(profilesLimit, forKey: "limit[profiles]")
				return encoder.items
			}
		}

		public func patch(_ body: BundleIDUpdateRequest) -> Request<BundleIDResponse> {
			Request(
                method: "PATCH",
                url: path,
                body: body,
                id: "bundleIds-update_instance"
            )
		}

		public var delete: Request<Void> {
			Request(
                method: "DELETE",
                url: path,
                id: "bundleIds-delete_instance"
            )
		}
	}
}
