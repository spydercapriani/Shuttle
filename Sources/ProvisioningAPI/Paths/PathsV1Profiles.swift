// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder
import Shuttle

extension AppStoreConnect.V1 {
	public var profiles: Profiles {
		Profiles(path: path + "/profiles")
	}

	public struct Profiles {
		/// Path: `/v1/profiles`
		public let path: String

        public func get(parameters: GetParameters? = .init()) -> Request<ProfilesResponse> {
			Request(
                method: "GET",
                url: path,
                query: parameters?.asQuery,
                id: "profiles-get_collection"
            )
		}

		public struct GetParameters {
			public var filterName: [String]?
            public var filterProfileState: [Profile.Attributes.ProfileState]?
            public var filterProfileType: [Profile.Attributes.ProfileType]?
			public var filterID: [String]?
			public var sort: Sort?
            public var profileFields: [Profile.Attributes.Field]?
            @Clamped(to: maxResources)
            public var limit: Int = .maxResources
            public var include: [Include]?
			public var certificateFields: [Certificate.Attributes.Field]?
			public var deviceFields: [Device.Attributes.Field]?
			public var bundleIDFields: [BundleID.Attributes.Field]?
            @ClampedOptional(to: maxResources)
			public var certificatesLimit: Int?
            @ClampedOptional(to: maxResources)
            public var devicesLimit: Int?

			public enum Sort: String, Codable, CaseIterable {
				case id
				case minusid = "-id"
				case name
				case minusname = "-name"
				case profileState
				case minusprofileState = "-profileState"
				case profileType
				case minusprofileType = "-profileType"
			}

			public enum Include: String, Codable, CaseIterable {
				case bundleID = "bundleId"
				case certificates
				case devices
			}

            public init(
                filterName: [Profile.Name]? = nil,
                filterProfileState: [Profile.Attributes.ProfileState]? = nil,
                filterProfileType: [Profile.Attributes.ProfileType]? = nil,
                filterID: [Profile.ID]? = nil,
                sort: Sort? = nil,
                profileFields: [Profile.Attributes.Field]? = nil,
                limit: Int = .maxResources,
                include: [Include]? = nil,
                certificateFields: [Certificate.Attributes.Field]? = nil,
                deviceFields: [Device.Attributes.Field]? = nil,
                bundleIDFields: [BundleID.Attributes.Field]? = nil,
                certificatesLimit: Int? = nil,
                devicesLimit: Int? = nil
            ) {
				self.filterName = filterName
				self.filterProfileState = filterProfileState
				self.filterProfileType = filterProfileType
				self.filterID = filterID
				self.sort = sort
				self.profileFields = profileFields
				self.limit = limit
				self.include = include
				self.certificateFields = certificateFields
				self.deviceFields = deviceFields
				self.bundleIDFields = bundleIDFields
				self.certificatesLimit = certificatesLimit
				self.devicesLimit = devicesLimit
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterName, forKey: "filter[name]")
				encoder.encode(filterProfileState, forKey: "filter[profileState]")
				encoder.encode(filterProfileType, forKey: "filter[profileType]")
				encoder.encode(filterID, forKey: "filter[id]")
				encoder.encode(sort, forKey: "sort")
				encoder.encode(profileFields, forKey: "fields[profiles]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(certificateFields, forKey: "fields[certificates]")
				encoder.encode(deviceFields, forKey: "fields[devices]")
				encoder.encode(bundleIDFields, forKey: "fields[bundleIds]")
				encoder.encode(certificatesLimit, forKey: "limit[certificates]")
				encoder.encode(devicesLimit, forKey: "limit[devices]")
				return encoder.items
			}
		}

		public func post(_ body: ProfileCreateRequest) -> Request<ProfileResponse> {
			Request(
                method: "POST",
                url: path,
                body: body,
                id: "profiles-create_instance"
            )
		}
	}
}
