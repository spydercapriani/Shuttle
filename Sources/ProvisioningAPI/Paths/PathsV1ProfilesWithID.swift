// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder
import Shuttle
import Shuttle

extension AppStoreConnect.V1.Profiles {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/profiles/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<ProfileResponse> {
			Request(
                method: "GET",
                url: path,
                query: parameters?.asQuery,
                id: "profiles-get_instance"
            )
		}

		public struct GetParameters {
			public var profileFields: [Profile.Attributes.Field]?
			public var include: [Include]?
			public var certificateFields: [Certificate.Attributes.Field]?
			public var deviceFields: [Device.Attributes.Field]?
            public var bundleIDFields: [ProvisioningAPI.BundleID.Attributes.Field]?
			public var certificatesLimit: Int?
			public var devicesLimit: Int?

			public enum Include: String, Codable, CaseIterable {
				case bundleID = "bundleId"
				case certificates
				case devices
			}

			public init(
                profileFields: [Profile.Attributes.Field]? = nil,
                include: [Include]? = nil,
                certificateFields: [Certificate.Attributes.Field]? = nil,
                deviceFields: [Device.Attributes.Field]? = nil,
                bundleIDFields: [ProvisioningAPI.BundleID.Attributes.Field]? = nil,
                certificatesLimit: Int? = nil,
                devicesLimit: Int? = nil
            ) {
				self.profileFields = profileFields
				self.include = include
				self.certificateFields = certificateFields
				self.deviceFields = deviceFields
				self.bundleIDFields = bundleIDFields
				self.certificatesLimit = certificatesLimit
				self.devicesLimit = devicesLimit
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(profileFields, forKey: "fields[profiles]")
				encoder.encode(include, forKey: "include")
				encoder.encode(certificateFields, forKey: "fields[certificates]")
				encoder.encode(deviceFields, forKey: "fields[devices]")
				encoder.encode(bundleIDFields, forKey: "fields[bundleIds]")
				encoder.encode(certificatesLimit, forKey: "limit[certificates]")
				encoder.encode(devicesLimit, forKey: "limit[devices]")
				return encoder.items
			}
		}

		public var delete: Request<Void> {
			Request(
                method: "DELETE",
                url: path,
                id: "profiles-delete_instance"
            )
		}
	}
}
