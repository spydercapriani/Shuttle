// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder
import Shuttle

extension AppStoreConnect.V1 {
	public var bundleIDs: BundleIDs {
		BundleIDs(path: path + "/bundleIds")
	}

	public struct BundleIDs {
		/// Path: `/v1/bundleIds`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<BundleIDsResponse> {
			Request(
                method: "GET",
                url: path,
                query: parameters?.asQuery,
                id: "bundleIds-get_collection"
            )
		}

		public struct GetParameters {
            public var filterIdentifier: [BundleID.Identifier]?
            public var filterName: [BundleID.Name]?
			public var filterPlatform: [BundleIDPlatform]?
			public var filterSeedID: [String]?
            public var filterID: [BundleID.ID]?
			public var sort: Sort?
			public var bundleIDFields: [BundleID.Attributes.Field]?
			public var limit: Int?
			public var include: [Include]?
			public var bundleIDCapabilityFields: [BundleIDCapability.Attributes.Field]?
			public var profileFields: [Profile.Attributes.Field]?
			public var appFields: [AppField]?
			public var bundleIDCapabilitiesLimit: Int?
			public var profilesLimit: Int?
            
            public enum Include: String, Codable, CaseIterable {
                case app
                case bundleIDCapabilities = "bundleIdCapabilities"
                case profiles
            }

			public enum Sort: String, Codable, CaseIterable {
				case id
				case minusid = "-id"
				case identifier
				case minusidentifier = "-identifier"
				case name
				case minusname = "-name"
				case platform
				case minusplatform = "-platform"
				case seedID = "seedId"
				case minusseedID = "-seedId"
			}

			public init(
                filterIdentifier: [BundleID.ID]? = nil,
                filterName: [BundleID.Name]? = nil,
                filterPlatform: [BundleIDPlatform]? = nil,
                filterSeedID: [String]? = nil,
                filterID: [String]? = nil,
                sort: Sort? = nil,
                bundleIDFields: [BundleID.Attributes.Field]? = nil,
                limit: Int? = nil,
                include: [Include]? = nil,
                bundleIDCapabilityFields: [BundleIDCapability.Attributes.Field]? = nil,
                profileFields: [Profile.Attributes.Field]? = nil,
                appFields: [AppField]? = nil,
                bundleIDCapabilitiesLimit: Int? = nil,
                profilesLimit: Int? = nil
            ) {
				self.filterIdentifier = filterIdentifier
				self.filterName = filterName
				self.filterPlatform = filterPlatform
				self.filterSeedID = filterSeedID
				self.filterID = filterID
				self.sort = sort
				self.bundleIDFields = bundleIDFields
				self.limit = limit
				self.include = include
				self.bundleIDCapabilityFields = bundleIDCapabilityFields
				self.profileFields = profileFields
				self.appFields = appFields
				self.bundleIDCapabilitiesLimit = bundleIDCapabilitiesLimit
				self.profilesLimit = profilesLimit
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(filterIdentifier, forKey: "filter[identifier]")
				encoder.encode(filterName, forKey: "filter[name]")
				encoder.encode(filterPlatform, forKey: "filter[platform]")
				encoder.encode(filterSeedID, forKey: "filter[seedId]")
				encoder.encode(filterID, forKey: "filter[id]")
				encoder.encode(sort, forKey: "sort")
				encoder.encode(bundleIDFields, forKey: "fields[bundleIds]")
				encoder.encode(limit, forKey: "limit")
				encoder.encode(include, forKey: "include")
				encoder.encode(bundleIDCapabilityFields, forKey: "fields[bundleIdCapabilities]")
				encoder.encode(profileFields, forKey: "fields[profiles]")
				encoder.encode(appFields, forKey: "fields[apps]")
				encoder.encode(bundleIDCapabilitiesLimit, forKey: "limit[bundleIdCapabilities]")
				encoder.encode(profilesLimit, forKey: "limit[profiles]")
				return encoder.items
			}
		}

		public func post(_ body: BundleIDCreateRequest) -> Request<BundleIDResponse> {
			Request(
                method: "POST",
                url: path,
                body: body,
                id: "bundleIds-create_instance"
            )
		}
	}
}
