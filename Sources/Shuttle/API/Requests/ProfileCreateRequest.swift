// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation

public struct ProfileCreateRequest: Encodable {
	public var data: Data

	public struct Data: Encodable {
        public let type: `Type` = .profiles
		public var attributes: Attributes
		public var relationships: Relationships

		public enum `Type`: String, Codable, CaseIterable {
			case profiles
		}

		public struct Attributes: Encodable {
            public var name: Profile.Name
            public var profileType: Profile.Attributes.ProfileType

            public init(
                name: Profile.ID,
                profileType: Profile.Attributes.ProfileType
            ) {
				self.name = name
				self.profileType = profileType
			}
		}

		public struct Relationships: Encodable {
			public var bundleID: BundleID
			public var devices: Devices?
			public var certificates: Certificates

			public struct BundleID: Encodable {
				public var data: Data

				public struct Data: Encodable, Identifiable {
                    public let type: `Type` = .bundleIDs
					public var id: String

					public enum `Type`: String, Codable, CaseIterable {
						case bundleIDs = "bundleIds"
					}

                    public init(id: Shuttle.BundleID.ID) {
						self.id = id
					}
				}

				public init(data: Data) {
					self.data = data
				}
			}

			public struct Devices: Encodable {
				public var data: [Datum]?

				public struct Datum: Encodable, Identifiable {
                    public let type: `Type` = .devices
					public var id: String

					public enum `Type`: String, Codable, CaseIterable {
						case devices
					}

                    public init(id: Device.ID) {
						self.id = id
					}
				}

				public init(data: [Datum]? = nil) {
					self.data = data
				}
			}

			public struct Certificates: Encodable {
				public var data: [Datum]

				public struct Datum: Encodable, Identifiable {
                    public let type: `Type` = .certificates
					public var id: String

					public enum `Type`: String, Codable, CaseIterable {
						case certificates
					}

                    public init(id: Certificate.ID) {
						self.id = id
					}
				}

				public init(data: [Datum]) {
					self.data = data
				}
			}

			public init(
                bundleID: BundleID,
                devices: Devices? = nil,
                certificates: Certificates
            ) {
				self.bundleID = bundleID
				self.devices = devices
				self.certificates = certificates
			}

			private enum CodingKeys: String, CodingKey {
				case bundleID = "bundleId"
				case devices
				case certificates
			}
		}

		public init(
            attributes: Attributes,
            relationships: Relationships
        ) {
			self.attributes = attributes
			self.relationships = relationships
		}
	}

	public init(data: Data) {
		self.data = data
	}
    
    public init(
        name: Profile.Name,
        type: Profile.Attributes.ProfileType,
        bundleId: BundleID,
        devices: [Device],
        certificates: [Certificate]
    ) {
        self.init(
            name: name,
            type: type,
            bundleId: bundleId.id,
            devices: devices.map(\.id),
            certificates: certificates.map(\.id)
        )
    }
    
    public init(
        name: Profile.Name,
        type: Profile.Attributes.ProfileType,
        bundleId: Shuttle.BundleID.ID,
        devices: [Device.ID],
        certificates: [Certificate.ID]
    ) {
        self.init(
            data: .init(
                attributes: .init(
                    name: name,
                    profileType: type
                ),
                relationships: .init(
                    bundleID: .init(
                        data: .init(
                            id: bundleId
                        )
                    ),
                    devices: .init(
                        data: devices.map { .init(id: $0) }
                    ),
                    certificates: .init(
                        data: certificates.map { .init(id: $0) }
                    )
                )
            )
        )
    }
}
